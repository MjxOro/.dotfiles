#!/usr/bin/env sh

# the scripting-addition must be loaded manually if
# you are running yabai on macOS Big Sur. Uncomment
# the following line to have the injection performed
# when the config is executed during startup.
#
# for this to work you must configure sudo such that
# it will be able to run the command without password
#
# see this wiki page for information:
#  - https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(latest-release)
#
# sudo yabai --load-sa
# yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"

# global settings
yabai -m config mouse_follows_focus          off
yabai -m config focus_follows_mouse          off
yabai -m config window_placement             second_child
yabai -m config window_topmost               off
yabai -m config window_shadow                on
yabai -m config window_opacity               off
yabai -m config window_opacity_duration      0.0
yabai -m config active_window_opacity        1.0
yabai -m config normal_window_opacity        0.90
yabai -m config window_border                off
yabai -m config window_border_width          6
yabai -m config active_window_border_color   0xff775759
yabai -m config normal_window_border_color   0xff555555
yabai -m config insert_feedback_color        0xffd75f5f
yabai -m config split_ratio                  0.50
yabai -m config auto_balance                 off
yabai -m config mouse_modifier               fn
yabai -m config mouse_action1                move
yabai -m config mouse_action2                resize
yabai -m config mouse_drop_action            swap

# Managed windows
yabai -m rule --add app!="^(iTerm2)$" manage=off
#Floating windows
#yabai -m rule --add app="^Music$" manage=off
#yabai -m rule --add app="^Inkdrop$" manage=off
#yabai -m rule --add app="^Simulator$" manage=off
#yabai -m rule --add app="^Messages$" manage=off
#yabai -m rule --add app="^Insomnia$" manage=off
#yabai -m rule --add app="^Finder$" manage=off

# general space settings
yabai -m config layout                       bsp
yabai -m config top_padding                  24
yabai -m config bottom_padding               12
yabai -m config left_padding                 12
yabai -m config right_padding                12
yabai -m config window_gap                   06

#simple-bar
# Refresh spaces widget on space change
yabai -m signal --add event=space_changed action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"
# Refresh spaces widget on display focus change
yabai -m signal --add event=display_changed action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"
# Refresh process widget on space change
yabai -m signal --add event=space_changed action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"simple-bar-process-jsx\"'"
# Uncomment next line to enable spaces widget refresh on your 2nd monitor
# yabai -m signal --add event=space_changed action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"simple-bar-spaces-2-jsx\"'"

# Refresh process widget on when focused application changes
yabai -m signal --add event=application_front_switched action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"simple-bar-process-jsx\"'"
# Refresh spaces widget on when focused application changes
yabai -m signal --add event=application_front_switched action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"

# Refresh process widget on when an application window is closed
yabai -m signal --add event=window_destroyed action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"simple-bar-process-jsx\"'"
# Refresh spaces widget on when an application window is closed
yabai -m signal --add event=window_destroyed action="osascript -e 'tell application \"Übersicht\" to refresh widget id \"simple-bar-spaces-jsx\"'"
#Floats
# float system preferences. Most of these just diable Yabai form resizing them.
#yabai -m rule --add app="^System Preferences$" sticky=on layer=above manage=off
#yabai -m rule --add app="^Karabiner-Elements$" sticky=on layer=above manage=off
#yabai -m rule --add app="^Karabiner-EventViewer$" sticky=on layer=above manage=off
#yabai -m rule --add app="^Finder$" sticky=on layer=above manage=off
#yabai -m rule --add app="^Keka$" sticky=on layer=above manage=off
#yabai -m rule --add app="^Alfred Preferences$" sticky=on layer=above manage=off
#yabai -m rule --add app="^Disk Utility$" sticky=on layer=above manage=off
#yabai -m rule --add app="^System Information$" sticky=on layer=above manage=off
#yabai -m rule --add app="^Activity Monitor$" sticky=on layer=above manage=off
#yabai -m rule --add app="^Path Finder$" manage=off
#yabai -m rule --add app="^TeamViewer$" sticky=off layer=above manage=off
#yabai -m rule --add app="Fantastical" manage=off
#yabai -m rule --add app="^Spotify$" manage=off
#yabai -m rule --add app="^iTerm2$" manage=off
#yabai -m rule --add app="^Flux$" manage=off
#yabai -m rule --add app="^Time Out$" manage=off
#yabai -m rule --add app="^perl_client_app$" manage=off
#yabai -m rule --add app="^console$" manage=off
#yabai -m rule --add app="^Harvest$" manage=off
#yabai -m rule --add app="^CiscoSparkHelper$" manage=off
#yabai -m rule --add app="^Logi Options$" manage=off
#yabai -m rule --add app="^Cisco Webex Start$" manage=off
#yabai -m rule --add app="^Private Internet Access$" manage=off

echo "yabai configuration loaded.."
